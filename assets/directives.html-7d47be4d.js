import{_ as p,r as e,o as l,c,a as n,b as s,d as t,e as o}from"./app-e3dbf12f.js";const i={},u=n("h1",{id:"directives",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#directives","aria-hidden":"true"},"#"),s(" Directives")],-1),r=n("h2",{id:"对比-component-vs-directive",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#对比-component-vs-directive","aria-hidden":"true"},"#"),s(" 对比 "),n("code",null,"Component"),s(" vs "),n("code",null,"Directive")],-1),d=n("code",null,"AngularJS",-1),k={href:"https://code.angularjs.org/snapshot/docs/tutorial/step_03",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"Vue",-1),m={href:"https://cn.vuejs.org/api/sfc-spec.html#overview",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"AngularJS",-1),g={href:"https://code.angularjs.org/snapshot/docs/guide/directive",target:"_blank",rel:"noopener noreferrer"},h={class:"custom-container tip"},q=o('<p class="custom-container-title">提示</p><p>In AngularJS, a Component is a special kind of <code>directive</code> that uses a simpler configuration which is suitable for a component-based application structure.</p><p>AngularJS 组件 是 AngularJS 指令的一个特例 或者 简化版本</p><p>好比 <code>Array.map</code> vs <code>Array.reduce</code> <code>reduce</code> 更强大但是 <code>map</code> 更便捷。</p>',4),y={href:"https://code.angularjs.org/1.8.2/docs/guide/component",target:"_blank",rel:"noopener noreferrer"},f=o(`<p>10 年前我就没有搞明白 组件与指令的区别， 因为官方的解释是偏向实现细节的 而不是接口应用层面， 如果你不关心实现细节你很难理解他们之间的区别。</p><p>10 年后我也不打算从官方的文档去理解，我相信作为应用开发人员从使用的角度去窥探他们的区别更有效。</p><h3 id="组件化开发" tabindex="-1"><a class="header-anchor" href="#组件化开发" aria-hidden="true">#</a> 组件化开发</h3><p>现代前端编程 <code>组件化</code> 是一个基础术语。 简答来说 从 使用角度来看 要解决 <code>封装</code> 和 <code>接口</code> 两大问题。</p><ul><li><p>组件封装</p><p>组件封装的是页面上某一个区域的 <code>渲染</code> 和 <code>数据处理逻辑</code> 在这一点上 <code>Component</code> 完全可以胜任</p></li><li><p>组件 IO</p><p>组件的 <code>复用</code> 离不开 输入输出的 接口, 输入 一般是指 <code>数据</code> 输出 一般是指 <code>事件</code></p><ul><li><p>Vue</p><blockquote><p>Both <code>options</code> and <code>composition</code> api</p></blockquote><ul><li><p>In</p><ul><li>Props</li></ul></li><li><p>Out</p><ul><li><code>@</code>Event</li></ul></li></ul></li><li><p>React</p><blockquote><p><code>Function Component</code> &gt;= 16.8</p></blockquote><ul><li><p>In</p><ul><li>Function Parameter <ul><li>原始类型和对象类型</li></ul></li></ul></li><li><p>Out</p><ul><li>Function Parameter <ul><li>回调函数</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="angular-js-的输入输出" tabindex="-1"><a class="header-anchor" href="#angular-js-的输入输出" aria-hidden="true">#</a> Angular JS 的输入输出</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>AngularJS 在 <code>指令</code> 这个 话题内有很多 技术 <code>细节</code> 比如</p><ul><li>link function</li><li>scope</li><li>element</li><li>attrs</li><li>controller</li><li>$scope</li><li>transcludeFn</li><li>restrict option</li><li>...</li></ul><p>这些都是属于 <code>实现细节</code> 和 <code>AngularJS 基础</code>， 实战来讲这些细节不影响你去实现常用的组件封装。所以我不会一一展开除非有必要。我还是会重点从 <code>使用</code> 角度出发 最后深入到 <code>细节</code>。</p></div><ul><li><p>如何往 组件 传参数</p><ul><li><p>在 option api <code>scope</code> 上定义入参</p><ul><li><p><code>@</code></p><blockquote><ul><li>和 Vue 的 @ 语法方向相反</li><li>父作用域的参数 单向 传递到 子作用域</li></ul></blockquote><p>这里注意观察 <code>initalTodoTitle</code></p><ul><li>组件 <code>todolist</code> 中该属性会被更新 但是 父组件 绑定的值不会更新</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Template</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add-todo</span> <span class="token attr-name">on-addtodo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add(title)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inital-todo-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{initalTodoTitle}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Add new todo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>add-todo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

<span class="token comment">// JS</span>
angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">&quot;todolist&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;addTodo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">restrict</span><span class="token operator">:</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">transclude</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;@initalTodoTitle&quot;</span><span class="token punctuation">,</span> <span class="token comment">//</span>
      <span class="token literal-property property">addtodo</span><span class="token operator">:</span> <span class="token string">&quot;&amp;onAddtodo&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">&quot;addTodo.html&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">controller</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;$scope&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">AddTodoController</span><span class="token punctuation">(</span><span class="token parameter">$scope</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        $scope<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          $scope<span class="token punctuation">.</span><span class="token function">addtodo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> $scope<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          $scope<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>=</code></p><blockquote><p>父子作用域的属性 双向绑定</p></blockquote><p>这里注意观察 <code>todos</code></p><ul><li><p>组件 <code>todolist</code> 中该属性会被更新(删除) 父组件中 绑定的该属性也随之更新</p></li><li><p>直接在子组件更新状态</p><ul><li>当代前端编程 不提倡 双向绑定 🙅‍♂️ 🙅‍♀️</li><li>不应该在 子组件内操作 高层级的数据 <ul><li>因此 我也用单向方式 在父组件更新了 todos 状态， 建议看完 <code>&amp;</code> 后自行 实验</li></ul></li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这里是和 当代前端编程范式 有较大区别的地方！</p></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Template</span>
<span class="token comment">// remove - the vuejs way</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">todos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">on-removetodo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remove(id)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">todos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// JS</span>
angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">&quot;todolist&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;todoList&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">restrict</span><span class="token operator">:</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// remove - the vuejs way</span>
      <span class="token comment">// removetodo: &quot;&amp;onRemovetodo&quot;,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">&quot;todoList.html&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">controller</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;$scope&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">TodoListController</span><span class="token punctuation">(</span><span class="token parameter">$scope</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// remove - the vuejs way</span>
        <span class="token comment">// $scope.onClick = function (id) {</span>
        <span class="token comment">//   // id 必须和 父作用域的 参数名保持一直</span>
        <span class="token comment">//   // 尚未找到 这个 “坑” 的出处</span>
        <span class="token comment">//   $scope.removetodo({ id });</span>
        <span class="token comment">// };</span>

        <span class="token comment">// enable the angularjs way with two way bindings， it is not good when it comes to modern frontend paradigm</span>
        $scope<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          $scope<span class="token punctuation">.</span>todos <span class="token operator">=</span> $scope<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>在 option api <code>scope</code> 上定义出参</p><ul><li><code>&amp;</code></li></ul><blockquote><p>子作用域 调用 父作用域 传递进来的 回调方法 参数</p></blockquote><p>这里注意观察 <code>onAddtodo</code></p><ul><li>组件入参 <code>onAddtodo</code> 映射到 组件内 变量 <code>addtodo</code></li><li>组件调用的参数 第 2 行 <code>on-addtodo=&quot;add(title)&quot;</code> 中的 <code>title</code> 必须和 第 21 行 <code>$scope.addtodo({ title: $scope.value });</code> 中的 属性保持一致 <ul><li>尚未找到该规则的出处 !!!</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Template</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add-todo</span> <span class="token attr-name">on-addtodo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add(title)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inital-todo-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{initalTodoTitle}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Add new todo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>add-todo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token comment">// JS</span>
angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">&quot;todolist&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;addTodo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">restrict</span><span class="token operator">:</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">transclude</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;@initalTodoTitle&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">addtodo</span><span class="token operator">:</span> <span class="token string">&quot;&amp;onAddtodo&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">&quot;addTodo.html&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">controller</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;$scope&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token function">AddTodoController</span><span class="token punctuation">(</span><span class="token parameter">$scope</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        $scope<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// title 必须和 父作用域的 参数名保持一直</span>
          <span class="token comment">// 尚未找到 这个 “坑” 的出处</span>
          $scope<span class="token punctuation">.</span><span class="token function">addtodo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> $scope<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          $scope<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="todo-list-angularjs" tabindex="-1"><a class="header-anchor" href="#todo-list-angularjs" aria-hidden="true">#</a> Todo List AngularJS</h2><blockquote><p>实战 代码参考</p></blockquote><ul><li><p>组件设计</p><ul><li><p><code>addTodo</code> 组件</p></li><li><p><code>todoList</code> 组件</p></li></ul></li></ul><details class="custom-container details"><summary>TODO List （点击展开）</summary><iframe src="https://codesandbox.io/embed/004-todo-list-early-bird-0ekx62?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="004-todo-list-early-bird" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></details>`,12);function _(w,x){const a=e("ExternalLinkIcon");return l(),c("div",null,[u,r,n("p",null,[s("在 "),d,s(" 的技术 术语里 "),n("a",k,[s("Component"),t(a)]),s(" 接近于 "),v,s(" 的 "),n("a",m,[s("SFC"),t(a)])]),n("p",null,[s("用现代前端组件来衡量， "),b,s(" 组件化技术的核心应该是 "),n("a",g,[s("Directive"),t(a)])]),n("div",h,[q,n("ul",null,[n("li",null,[s("引用自 "),n("a",y,[s("AngularJS component"),t(a)])])])]),f])}const $=p(i,[["render",_],["__file","directives.html.vue"]]);export{$ as default};
