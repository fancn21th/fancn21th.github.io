import{_ as c,r as o,o as p,c as d,a as n,b as s,d as a,w as r,e}from"./app-e3dbf12f.js";const u="/images/frontend-npm-trends.png",h={},g=e('<h1 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h1><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><p>下文有 大量的 新名词 出现，它们都带有链接，你可以去了解他们， 但是理解本篇文章， 无需你掌握它们。</p></li><li><p>下文中 <code>本质</code> 和 <code>隐喻</code> 会交替使用 它们往往代表同一个含义</p></li></ul></div><h2 id="为什么学习前端" tabindex="-1"><a class="header-anchor" href="#为什么学习前端" aria-hidden="true">#</a> 为什么学习前端</h2><p>这是后期插入的段落，因为我觉得下文中提到的 <code>为什么选择前端</code> 的原因一定是会引起你的共鸣。 这绝对 <strong>值得一提</strong>。</p><p>Natalia: It&#39;s a really interesting question because I&#39;m not a well-established web developer, considering my experience in years. I had only three and a half years experience in web development, and previously I worked as a database administrator. I decided to switch my career, I think, after I had a maternity leave, because I was always interested in web development. I was playing with HTML in Notepad when I was in high school, and I decided to give it a try. And it went surprisingly good, because from my experience, <strong>frontend development is one of the most exciting, because you can almost immediately see the result of your work without even compiling step, usually</strong>.</p><p>因为你能立即看到你工作的结果，这让人非常开心。</p><h2 id="隐喻" tabindex="-1"><a class="header-anchor" href="#隐喻" aria-hidden="true">#</a> 隐喻</h2>',7),k={href:"https://www.grammarly.com/blog/metaphor/",target:"_blank",rel:"noopener noreferrer"},m={class:"custom-container tip"},v=n("p",{class:"custom-container-title"},"提示",-1),b={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("img",{src:u,alt:"npm trends"})],-1),f={href:"https://zh-hans.reactjs.org/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zh-hans.reactjs.org/docs/thinking-in-react.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"读好书",-1),x=n("code",null,"先动手",-1),I=n("code",null,"理论",-1),q=n("code",null,"实践",-1),A=n("code",null,"平衡车",-1),T=n("strong",null,"隐喻",-1),z=n("code",null,"骑车",-1),L=n("code",null,"掌握平衡",-1),S=n("code",null,"本质",-1),C=n("code",null,"本质",-1),H=n("code",null,"知识点",-1),j=e(`<h2 id="ui-fn-state" tabindex="-1"><a class="header-anchor" href="#ui-fn-state" aria-hidden="true">#</a> UI = fn(state)</h2><p>那么我正式开始学习 本文第一个 <code>隐喻</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ui <span class="token operator">=</span> fn<span class="token punctuation">(</span>state<span class="token punctuation">)</span> // 将前端编程比喻成一个数学公式，实际上源于 React 函数式编程思想
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从-hello-world-开始" tabindex="-1"><a class="header-anchor" href="#从-hello-world-开始" aria-hidden="true">#</a> 从 Hello World 开始</h3>`,4),E={href:"https://zh.wikipedia.org/wiki/Hello_World",target:"_blank",rel:"noopener noreferrer"},P=e("<p>为了解释第一个 <code>隐喻</code>， 我们从 <code>实践</code> 开始。以下你看到的是一个非常简单的代码片段， 当然它是可执行的， 你可以在 <code>代码沙盒</code> 中看到它运行在 浏览器 中的效果。是的 我们是 <code>程序员</code> 当然不能不从 <code>hello world</code> 开始。</p><p>虽然代码很简单，但是涉及到以下技术点， 我把它们列举出来，但是你暂时不需要去在意它们。此时只需要知道 我们做了一件了不起的事情，在浏览器里面 显示了 <code>hello world!</code> 💯</p><p>技术点:</p>",3),B={href:"https://developer.mozilla.org/zh-CN/docs/Learn/HTML",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript",target:"_blank",rel:"noopener noreferrer"},W={href:"https://developer.mozilla.org/zh-CN/docs/Web/API",target:"_blank",rel:"noopener noreferrer"},M={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>代码:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterbegin&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello world!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>代码沙盒 （点击展开）</summary><iframe src="https://codesandbox.io/embed/hello-dom-mnfed7?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="hello-dom" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></details><h3 id="三个步骤" tabindex="-1"><a class="header-anchor" href="#三个步骤" aria-hidden="true">#</a> 三个步骤</h3><blockquote><p>按部就班</p></blockquote><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如何把大象 🐘 放进冰箱</p><ol><li>打开冰箱</li><li>把大象放进冰箱</li><li>关上冰箱</li></ol></div><p>基于 <code>hello world</code> 这个简单的程序我来解释一下这个 <code>ui = fn(state)</code> 的隐喻， 我先做一个简单的翻译 <code>界面 = 方法(状态)</code>。</p><ul><li><strong>步骤 A</strong>: 首先我们要有一个状态 也就是 state 在这里 它等于 <code>hello world!</code></li><li><strong>步骤 B</strong>: 然后我们要想办法 把这个状态 处理好 加工一下，例如我们可以把状态做一个 格式转换（后面的例子里面我们会这样做）</li><li><strong>步骤 C</strong>: 最后我们要把这个 经过加工的 最终状态在 浏览器中 呈现出来， 这个呈现也常叫做 渲染，就是 ui 代表的含义，也就是 <code>hello world!</code> 实际呈现在 浏览器里 的样子</li></ul><p>我可以想象 仅仅 基于 <code>hello world</code> 案例来理解 这个 <code>隐喻</code> 是远远不够的， 没有关系， 理解 <code>把大象放进冰箱</code> 这一步 同样也不容易。</p><p>第一个隐喻将贯穿整个教程，接下来我们逐步来展开并解释它， 相信 最后你会觉得 这个 <code>隐喻</code> 并不牵强。</p><h3 id="声明式-vs-命令式" tabindex="-1"><a class="header-anchor" href="#声明式-vs-命令式" aria-hidden="true">#</a> 声明式 vs 命令式</h3><blockquote><p>殊途同归</p></blockquote>`,12),O={class:"custom-container tip"},R=n("p",{class:"custom-container-title"},"提示",-1),J={href:"https://dev.to/ruizb/declarative-vs-imperative-4a7l#:~:text=Declarative%20programming%20is%20a%20paradigm,which%20mutate%20the%20program's%20state.",target:"_blank",rel:"noopener noreferrer"},G=e("<p>感谢原文作者精彩的解释，简单翻译一下重点</p><p>Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow.</p><p>声明式编程是描述 <code>做什么</code> 的编程范式。</p><p>Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step, which mutate the program&#39;s state.</p><p>命令式编程是描述 <code>怎么做</code> 的的编程范式。 它显示地去描述每一个步骤与每一条指令。</p><p>This &quot;what vs how&quot; is often used to compare both of these approaches because... Well, it is actually a good way to describe them.</p><p>简单说就是 <code>做什么</code> 与 <code>怎么做</code> 的比较</p>",7),V=e(`<ul><li>命令式</li></ul><p>我们第一个 <code>hello world</code> 范例里面是典型的 <code>命令式</code> 编程范式。如果你不熟悉 相关的 API 你光看代码不知道开发人员到底要干什么。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 这里调用了一条指令，把 \`hello world\` 插入到 \`body\` 的开头</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterbegin&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello world!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明式</li></ul><p>我们来对这段代码做一点改进，我们创建了一个方法，语义化的方法名，然后我们调用了它。</p>`,5),D={class:"custom-container warning"},U=n("p",{class:"custom-container-title"},"注意",-1),Q=n("p",null,[s("准确的来说 这个调用方式 是 javascript functions 的四种调用方式之一 "),n("code",null,"The Function Invocation Pattern"),s(" 不同于其他语言 在 Javascript 里 Function 调用有不同的模式，后面会着重讲解，更多内容请参考 "),n("code",null,"JavaScript: The Good Parts: The Good Parts"),s(" 一书")],-1),Y=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 注意: 理解这里 要求你至少学过一门计算机语言 知道什么是 方法调用</span>
  <span class="token comment">// 通过 语义化的 方法名 我们不用去查阅 API 文档就能知道下面程序是干啥的</span>
  <span class="token keyword">function</span> <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterbegin&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>声明式的 \`hello world\` （点击展开）</summary><iframe src="https://codesandbox.io/embed/02-hello-dom-declarative-wmzevg?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="02-hello-dom-declarative" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></details><p>这里看上去离我们的 第一个 <code>ui = fn(state)</code> 的隐喻更接近了一些。是的，这里我们并不需要对号入座 亦或者 一一对应，更重在理解这个 <code>隐喻</code> 的内涵。</p><h3 id="state-的变化" tabindex="-1"><a class="header-anchor" href="#state-的变化" aria-hidden="true">#</a> state 的变化</h3><blockquote><p>大同小异</p></blockquote><p>不难理解如果我们改变了 <code>showTextOnPageAsFirstElementInBody</code> function 的入参，屏幕上的结果会发生什么样的变化。 我甚至怀疑你已经在 <code>代码沙盒</code> 中已经动过手脚了。 什么？ 你还没有？ 💢 本教程期望你通过不断实践 解锁 🔓 各项前端技能。</p><p>不要犹豫，动手吧。你甚至不用在你的电脑上搭建开发环境。 <code>代码沙盒</code> 是你学会搭建开发环境前最简单的实践方式。</p><p>不管 <code>入参</code> 怎么变化 我相信你可以不假思索想象到 浏览器中呈现的样子。当然这我们没有考虑 <code>边界场景 Edge Cases</code>，但是很可能这一直都没有关系。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterbegin&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// hello world! ==&gt; hello frontend</span>
  <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token string">&#39;hello frontend&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fn-的变化" tabindex="-1"><a class="header-anchor" href="#fn-的变化" aria-hidden="true">#</a> fn 的变化</h3><blockquote><p>脱胎换骨</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token comment">/* The animation code */</span>
    <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">{</span>
      <span class="token selector">100%</span> <span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@keyframes</span> move-right</span> <span class="token punctuation">{</span>
      <span class="token selector">100%</span> <span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>450px<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token selector">div</span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
      <span class="token property">font-weight</span><span class="token punctuation">:</span> 900<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
      <span class="token property">animation-name</span><span class="token punctuation">:</span> rotate<span class="token punctuation">,</span> move-right<span class="token punctuation">;</span>
      <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span>
      <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>
      <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
      <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>
      <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&quot;afterbegin&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// hello world! ==&gt; hello frontend</span>
  <span class="token function">showTextOnPageAsFirstElementInBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello frontend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),$={href:"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured#%E5%86%85%E9%83%A8%E6%A0%B7%E5%BC%8F%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},K={href:"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"hello world",-1),Z=n("code",null,"样式",-1),nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals",target:"_blank",rel:"noopener noreferrer"},sn=e('<p>以上就是所有的变化。 但是它们都属于 <code>fn</code> 的变化， 而 <code>state</code> 没有变。</p><p>是的，这里你要区分 一个前端程序的 <code>状态</code> 和 <code>对状态的操作</code>。<code>fn</code> 代表对 <code>状态</code> 也就是 <code>state</code> 的操作。 但是它并非一定发生在 <code>function</code> 内部，对于样式的定义，我们也可以认为是 <code>fn</code> 的变化。</p><p>你是在忽悠我吧？😵</p><p>我们回过头来想想， 在上一节，如果 单纯是状态发生了 改变， 界面上会发生什么样的变化？ 是什么变了？</p><p>再看看这个例子，如果状态没有变，而是 其他的部分发生了变化， 仔细看看界面上到底发生了什么样的变化？ 又是什么变了？</p><div class="custom-container danger"><p class="custom-container-title">重点</p><ul><li><code>state</code> 也就是状态 往往是 文本信息或者图片信息。</li><li><code>fn</code> 泛指对 <code>state</code> 的操作和加工 <ul><li>比如直接修改 <code>state</code> 例如对 文字进行过滤，或者 对图片进行截取</li><li>亦或者只是给 <code>state</code> 增加样式，让它具有更好的 <code>外观</code>。</li></ul></li></ul></div>',6),an={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations",target:"_blank",rel:"noopener noreferrer"},tn=e('<details class="custom-container details"><summary>fn 发生变化 （点击展开）</summary><iframe src="https://codesandbox.io/embed/03-hello-dom-animated-5osrl0?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="03-hello-dom-animated" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></details><h3 id="ui-的变化" tabindex="-1"><a class="header-anchor" href="#ui-的变化" aria-hidden="true">#</a> ui 的变化</h3><blockquote><p>前因后果</p></blockquote><p><code>state</code> 和 <code>fn</code> 决定了 <code>ui</code>，或者说 <code>状态</code> 和 <code>对状态的处理</code> 确定了， <code>界面</code> 也就确定了。 这也是 <code>=</code> 的含义， 所以后续教程主要讲 如何 从 <code>fn</code> 与 <code>state</code> 入手去理清 前端设计研发的思想。</p><p><code>state</code> 变化了，<code>ui</code> 就会变化； <code>fn</code> 变化了，<code>ui</code> 也会变化。</p>',5),en=n("code",null,"ui",-1),on=n("code",null,"浏览器",-1),ln=n("code",null,"state",-1),cn=n("code",null,"fn",-1),pn=n("code",null,"浏览器",-1),dn=n("code",null,"文字",-1),rn=n("code",null,"多媒体信息",-1),un=n("code",null,"样式",-1),hn=n("code",null,"动画",-1),gn=n("code",null,"浏览器",-1),kn={href:"https://time.geekbang.org/column/article/80240",target:"_blank",rel:"noopener noreferrer"},mn=n("h2",{id:"回顾",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回顾","aria-hidden":"true"},"#"),s(" 回顾")],-1),vn={class:"custom-container tip"},bn=n("p",{class:"custom-container-title"},"提示",-1),_n={href:"https://dev.to/tamerlang/understanding-solid-principles-dependency-inversion-1b0f",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,"高层次的类不应该依赖于低层次的类。 两者都应该依 赖于抽象接口。抽象接口不应依赖于具体实现。具体 实现应该依赖于抽象接口。",-1),wn=n("code",null,"依赖倒置",-1),yn={href:"https://signalvnoise.com/posts/3124-give-it-five-minutes",target:"_blank",rel:"noopener noreferrer"},xn=e('<p>就像 <code>依赖倒置</code> 原则表达的意思一样，我希望学习一门技术的时候能首先区分它 的 <code>What</code> 和 <code>How</code> ，也就是 <code>做什么</code> 和 <code>怎么做</code>，并且 先从 <code>What</code> 入手 然后 展开到 <code>How</code>。</p><p>在软件设计中， <code>做什么</code> 一般称为 <code>High Level</code> 设计 也就是 <code>高层次</code> 设计， <code>怎么做</code> 一般称为 <code>Low Level</code> 设计 也就是 <code>低层次</code> 设计。<code>高层次</code> 设计一般很 <code>简洁</code> 但是 <code>抽象</code> 对于 新人 不易理解， <code>低层次</code> 设计一般 很 <code>具体</code> 但是 <code>庞杂</code> 而且如果先从细节入手 容易 <code>只见树木而不见森林</code>， 新人 很容易迷路。</p><p>在 <code>What</code> 层面做到 简单易懂， 并且 对于覆盖到的 <code>细节</code> 辅以最权威的参考资料，既是本文的风格。</p><p><code>高层次</code> 设计必然 <code>简洁</code> 所以自然你学习起来 花费的时间 会更少。 但是 需要注意 掌握这些 <code>核心</code> 知识点 离不开大量的工程实践。</p><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><blockquote><p>TBD</p></blockquote>',6);function In(qn,An){const t=o("ExternalLinkIcon"),i=o("RouterLink"),l=o("MyImage");return p(),d("div",null,[g,n("blockquote",null,[n("p",null,[n("a",k,[s("隐喻"),a(t)]),s(" 是指把一个事物 描述 成另外一个事物的语言表现手法， 常见于把不常见的事物比喻成常见的事物从而解释新事物的形态，特点 等等。")])]),n("div",m,[v,n("p",null,[s("截止 2022 年 6 月 主流前端框架 "),n("a",b,[s("npm"),a(t)]),s(" 下载量的对比")]),_]),n("p",null,[s("从上图中可以看到 "),n("a",f,[s("React"),a(t)]),s(" 是前端领域中最热门的技术， React 的设计思想 从 "),n("a",w,[s("React 哲学"),a(t)]),s(" 一文中可见一斑。 打开链接， 你可以看到 React 哲学 章节 出现在 核心概念的 最后一节，这说明，理解哲学首先需要实践。")]),n("p",null,[a(i,{to:"/zh/frontend/"},{default:r(()=>[s("介绍")]),_:1}),s(" 一章里我们谈到了 "),y,s(" 或者 "),x,s(" 两种入门方法，实际上我们说的就是 "),I,s(" 与 "),q,s(" 之间的关系。 最后的 "),A,s(" 的 "),T,s(" 是本文的核心思想。 但是不同于学 "),z,s(" 🚴‍♂️ 只有一个 本质 也就是 "),L,s(" ⚖️。 学习前端 会 充满各种 "),S,s(" , 对这些 "),C,s(" 的理解和掌握 可以帮助你将 大量的 前端 "),H,s(" 连接起来。")]),j,n("blockquote",null,[n("p",null,[n("a",E,[s("Hello World"),a(t)]),s(" 是程序员自我修炼中躲不开的魔咒 👻")])]),P,n("ul",null,[n("li",null,[n("a",B,[s("HTML"),a(t)])]),n("li",null,[n("a",N,[s("Javascript"),a(t)])]),n("li",null,[n("a",W,[s("Web API"),a(t)]),n("ul",null,[n("li",null,[n("a",M,[s("insertAdjacentHTML API"),a(t)])])])])]),F,n("div",O,[R,n("p",null,[n("a",J,[s("声明式 vs 命令式"),a(t)])]),G]),V,n("div",D,[U,Q,a(l,{src:"https://m.media-amazon.com/images/I/81kqrwS1nNL._AC_UY436_FMwebp_QL65_.jpg",alt:"the good parts"})]),Y,n("p",null,[s("这次我对代码做了较大的改变， 从 第 2 行 到 第 30 行 添加了 "),n("a",$,[s("内部样式表"),a(t)]),s(" 这属于 "),n("a",K,[s("CSS"),a(t)]),s(" 的知识，现在你只需要知道它给 "),X,s(" 添加了 "),Z,s(" 就可以了。")]),n("p",null,[s("再来看 第 35 行, 末尾我增加了 "),n("a",nn,[s("模板字符串"),a(t)]),s(" 它是由一对 `` 组成，以后你会经常遇见它， 以至于你不用刻意记忆你也忘不了它的语法规则。")]),sn,n("p",null,[s("对了， 我们还不经意间又解锁了 "),n("a",an,[s("CSS 动画"),a(t)]),s("。 我打赌你很喜欢这一块的内容。")]),tn,n("p",null,[en,s(" 变化 背后是因为 "),on,s(" 能响应 "),ln,s(" 与 "),cn,s(" 的变化。 "),pn,s(" 针对这些变化 又做了什么， 它是如何呈现 "),dn,s("，"),rn,s("，"),un,s("，以及 "),hn,s(" 的呢? "),gn,s(" 里 大有文章。 你可以参考 "),n("a",kn,[s("一个浏览器是如何工作的"),a(t)])]),mn,n("div",vn,[bn,n("p",null,[n("a",_n,[s("依赖倒置原则 英文"),a(t)])]),fn]),n("p",null,[s("你可能尚未适应 本文的风格。 就像 我理解 "),wn,s(" 原则 绝对不是我第一次看到它的时候。 是时候祭出我的护身符 "),n("a",yn,[s("Give it five minutes"),a(t)]),s(" 你可以用 翻译软件 来读完这篇文章。 我想你能在职业生涯早期看到这篇文章肯定会受益匪浅。")]),xn])}const zn=c(h,[["render",In],["__file","getting-started.html.vue"]]);export{zn as default};
