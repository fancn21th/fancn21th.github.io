import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-e3dbf12f.js";const i={},u=e('<h1 id="算法-数据篇" tabindex="-1"><a class="header-anchor" href="#算法-数据篇" aria-hidden="true">#</a> 算法（数据篇）</h1><blockquote><p>algorithm cookbook for data manipulation</p></blockquote><h2 id="结构化数据异步回填" tabindex="-1"><a class="header-anchor" href="#结构化数据异步回填" aria-hidden="true">#</a> 结构化数据异步回填</h2><ul><li>问题</li><li>方案</li><li>讨论</li></ul><h2 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap" aria-hidden="true">#</a> Flatmap</h2><ul><li>问题</li><li>方案</li><li>讨论</li></ul><h2 id="compose-functions" tabindex="-1"><a class="header-anchor" href="#compose-functions" aria-hidden="true">#</a> Compose Functions</h2>',7),r=e(`<li><p>问题</p><p>需要针对初始数据进行一系列的处理， 每个处理步骤都由指定的 <code>function</code> 完成。 有没有更简单直观的方式去调用呢。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 增1</span>
<span class="token keyword">const</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 乘2</span>
<span class="token keyword">const</span> <span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 乘3</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直觉上会这样去使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方案</p><p>利用 <code>reduce</code> 方法实现的 <code>compose</code> 模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>increment<span class="token punctuation">,</span> double<span class="token punctuation">,</span> triple<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">cur</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 这里用高阶函数的范式去编写</span>
<span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),k=n("p",null,"讨论",-1),d={href:"https://www.geeksforgeeks.org/piping-in-unix-or-linux/",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[s("利用 "),n("code",null,"Reduce"),s(" 实现")],-1),v={href:"https://github.com/fancn21th/frontend-algorithm-cookbook/blob/main/src/compose-functions/compose-functions.test.js",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"获取嵌套-property",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#获取嵌套-property","aria-hidden":"true"},"#"),s(" 获取嵌套 property")],-1),h=e(`<li><p>问题</p><p>如何更灵活地，动态地 获取一个 对象嵌套属性 ?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直觉上 我们会直接 访问 character.master.master.name</span>
<span class="token keyword">const</span> characterA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;悟空&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">master</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">master</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;观音&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> characterB <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">master</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;观音&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 如果你要迭代处理一个 对象数组， 并且针对相同的 嵌套属性 进行 访问和处理</span>
<span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span>characterA<span class="token punctuation">,</span> characterB<span class="token punctuation">]</span><span class="token punctuation">;</span>

characters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> masterName <span class="token operator">=</span> c<span class="token punctuation">.</span>master<span class="token punctuation">.</span>master<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token comment">// 处理 masterName</span>
  <span class="token comment">// 很显然如果这里会抛异常</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方案</p><p>利用 <code>reduce</code> 方法实现的 一级一级的属性访问，如果失败就返回 <code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> propName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> object<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getNestedPropByPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span>characterA<span class="token punctuation">,</span> characterB<span class="token punctuation">]</span><span class="token punctuation">;</span>

characters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> masterName <span class="token operator">=</span> <span class="token function">getNestedPropByPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 处理 masterName</span>
  <span class="token comment">// 可以针对 masterName 是否为 falsy 来判断</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),f=n("p",null,"讨论",-1),g=n("li",null,[s("利用 "),n("code",null,"Reduce"),s(" 实现")],-1),y={href:"https://github.com/fancn21th/frontend-algorithm-cookbook/blob/main/src/nested-property/nested-property.test.js",target:"_blank",rel:"noopener noreferrer"};function _(w,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[r,n("li",null,[k,n("ul",null,[n("li",null,[s("借鉴了 "),n("a",d,[s("Unix Piping"),t(a)]),s(" 思想")]),m,n("li",null,[n("a",v,[s("Code In Unit Test"),t(a)])])])])]),b,n("ul",null,[h,n("li",null,[f,n("ul",null,[g,n("li",null,[n("a",y,[s("Code In Unit Test"),t(a)])])])])])])}const q=p(i,[["render",_],["__file","algorithm-data.html.vue"]]);export{q as default};
