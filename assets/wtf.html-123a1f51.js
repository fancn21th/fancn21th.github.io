import{_ as t,r as i,o,c as p,a,b as n,d as c,e as s}from"./app-e3dbf12f.js";const l={},r=s(`<h1 id="什么是-node" tabindex="-1"><a class="header-anchor" href="#什么是-node" aria-hidden="true">#</a> 什么是 NODE</h1><h2 id="v8" tabindex="-1"><a class="header-anchor" href="#v8" aria-hidden="true">#</a> V8</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>高级语言 例如 JavaScript 是不能直接被计算机执行的，需要编译成机器码才能被计算机执行。</p></div><h3 id="预备知识" tabindex="-1"><a class="header-anchor" href="#预备知识" aria-hidden="true">#</a> 预备知识</h3><ul><li><p>compiler</p><ul><li>把 JavaScript 编译成机器码，也就是能直接被计算机执行的代码</li></ul></li><li><p>transpiler</p><ul><li>把一种类型的源代码，翻译成另外一种语言</li><li>目标的语言依然是高级语言不能执行</li></ul><p>如下，这是将 ES6 翻译成 ES5</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">substract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">substract</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">substract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>interpreter</p><ul><li>直接执行高级语言的，但是不生成可以直接执行的机器码</li></ul></li></ul><h3 id="javascript-engine" tabindex="-1"><a class="header-anchor" href="#javascript-engine" aria-hidden="true">#</a> JavaScript Engine</h3>`,6),d={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},u=a("code",null,"interpreter",-1),v=s("<li><p>现代浏览器的功能都建立在 Javascript 引擎之上。</p></li><li><p>除了 <code>v8</code> 还有其他的引擎，如 <code>SpiderMonkey</code>、<code>Chakra</code>、<code>JSC</code>、<code>Blink</code> 等。</p></li><li><p>Node.js 使用的是 <code>v8</code>。</p></li>",3),k=s(`<h2 id="node-js-is-wtf" tabindex="-1"><a class="header-anchor" href="#node-js-is-wtf" aria-hidden="true">#</a> Node.js is WTF</h2><ul><li><code>Node.js</code> 是 C++ 编写的程序</li><li>服务端 Javascript 运行时环境</li><li><code>V8</code>是它的引擎</li><li>有了 运行时环境 你就能在服务端运行 用 <code>JavaScript</code> 语言编写的程序</li></ul><h2 id="non-blocking" tabindex="-1"><a class="header-anchor" href="#non-blocking" aria-hidden="true">#</a> Non-Blocking</h2><p><code>Node.js</code> 是 单线程 无阻塞 IO 操作的 运行时环境。</p><p>这个很好理解</p><ul><li><p>单线程是指</p><p>好比你在一个餐厅吃饭， 只有一个服务员，不管你现在提了什么要求， 你只能等服务员把先收到的要求满足了之后， 才能得到 服务员响应， 才能轮到 安排好你的要求。</p><p>只有一个服务员，这就叫单线程</p></li><li><p>无阻塞</p><p>虽然只有一个服务员，但是服务员并不会傻傻等待， 比如第一个顾客点了一个现烤披萨，而第二个顾客只需要一杯白开水， 如果服务员一直等披萨做好，再去拿白开水，那么服务员等待的时间，服务就暂停了，这就叫阻塞。</p><p>当然现实中，服务员不会等 现烤披萨做好了再去把白开水准备好，而是给重复啊下单后，乘着厨房在做披萨的时间，紧接着去把白开水倒好了递给第二位顾客， 等披萨做好了再把 披萨端给第一个顾客。</p><p>灵活安排工作，这就叫无阻塞。</p></li></ul><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2><ul><li><p>common js</p><p>导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">substract</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>无需指明 文件后缀名， 当你指定 <code>reqire(&#39;xxx&#39;)</code>，node.js 会自动寻找 <code>xxx.js</code> 文件，或者寻找 <code>xxx/index.js</code> 文件。</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> substract <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./substract&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Node&#39;s script processor</p><ul><li>读取入口文件</li><li>读取入口文件的依赖（导入文件），如此递归</li><li>开始执行任务</li><li>开始执行事件循环直到事件循环没有任务</li></ul></li></ul><h2 id="repl" tabindex="-1"><a class="header-anchor" href="#repl" aria-hidden="true">#</a> REPL</h2><blockquote><p>read execute print loop</p></blockquote>`,10);function h(b,m){const e=i("ExternalLinkIcon");return o(),p("div",null,[r,a("ul",null,[a("li",null,[a("p",null,[a("a",d,[n("V8"),c(e)]),n(" 是 JavaScript 引擎， 它是 "),u,n("。")])]),v]),k])}const x=t(l,[["render",h],["__file","wtf.html.vue"]]);export{x as default};
