import{_ as p,r as t,o as e,c as o,a,b as n,d as c,e as l}from"./app-e3dbf12f.js";const i={},u=a("h1",{id:"react-dnd",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#react-dnd","aria-hidden":"true"},"#"),n(" React DnD")],-1),r={href:"https://react-dnd.github.io/react-dnd/docs/tutorial",target:"_blank",rel:"noopener noreferrer"},d=l(`<p><code>Dan</code> 是少数几个给我启发最大并且我还记得住名字的作者。</p><p>在 教程中 他 不仅仅讲述了 如何 使用 <code>React-Dnd</code> 更重要的是 展现了他 如何编写前端程序的 思维方式。</p><h2 id="思维方式" tabindex="-1"><a class="header-anchor" href="#思维方式" aria-hidden="true">#</a> 思维方式</h2><ul><li>方向 或者 顺序 <ul><li>从下而上，从细节到抽象</li><li>始终能看得到程序的变化</li><li>为了能让细节能工作，在抽象层面可以做一些临时的方案 <ul><li>例如 往 <code>Board</code> 棋盘对象里面传递 一个 <code>Knight</code> 骑士 🐴 的位置</li></ul></li><li>先从简单的规则开始 再到具体复杂的规则 <ul><li>例如 先实现一个 旗子的移动 再 增加移动的约束</li></ul></li></ul></li><li>先目的，后技术 <ul><li>最终的方案不是一撮而就</li><li>先有需求（目的）</li><li>后有技术，选择合理的技术方案</li></ul></li><li>状态设计 <ul><li>什么是 props，是不是必要的</li><li>什么是 states，到底有多少个相关的 业务状态</li></ul></li></ul><h2 id="app-设计细节" tabindex="-1"><a class="header-anchor" href="#app-设计细节" aria-hidden="true">#</a> APP 设计细节</h2><ul><li><p><code>i</code> vs <code>[x,y]</code></p><ul><li>如果我来设计 一个 关于格子 位置的 入参 我大概率会先考虑 <code>[x,y]</code>，我觉得这样简单直观 符合语义</li><li>但是 再仔细一想， <code>i</code> 从数据结构上来讲更简单， 而且 <code>[x,y]</code> 更像是 派生状态 而不是原始的状态</li></ul></li><li><p><code>observe</code></p><ul><li>我加上我个人的理解，拖拽可以理解成 <code>UI交互</code>的两个状态， 一个是起始位置，一个是终点位置</li><li>对于 棋子 而言 我只需知道我的下一个位置 然后我正确的渲染到这个位置即可</li><li>这样一来 一个简单的 事件订阅完全就能满足 引入 <code>Drag and Drop API</code> 前， 游戏状态的设计需求</li></ul></li><li><p><code>Square</code> 的位置</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>If a component doesn&#39;t need some data for rendering, it doesn&#39;t need that data at all.</p></div><ul><li>位置是不是应该是 <code>Square</code> 的 <code>Props</code> 一直是 <code>Dan</code> 抓住的 矛盾主线。这确实很重要。 不到万不得已不要轻易给 一个 <code>组件</code> 增加 不必要的 状态(数据)</li></ul></li></ul><h2 id="dnd-接口设计" tabindex="-1"><a class="header-anchor" href="#dnd-接口设计" aria-hidden="true">#</a> Dnd 接口设计</h2><h3 id="usedrag" tabindex="-1"><a class="header-anchor" href="#usedrag" aria-hidden="true">#</a> useDrag</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Knight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>isDragging<span class="token punctuation">}</span><span class="token punctuation">,</span> drag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDrag</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> ItemTypes<span class="token punctuation">.</span><span class="token constant">KNIGHT</span><span class="token punctuation">,</span>
    <span class="token function-variable function">collect</span><span class="token operator">:</span> <span class="token parameter">monitor</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">isDragging</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>monitor<span class="token punctuation">.</span><span class="token function">isDragging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>drag<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token literal-property property">opacity</span><span class="token operator">:</span> isDragging <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cursor</span><span class="token operator">:</span> <span class="token string">&#39;move&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      ♘
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>In &amp; Out</code></p><ul><li><p>In</p><ul><li><code>type</code><ul><li>给予 被拖拽元素 一个类型标识</li></ul></li><li><code>collect</code> callback <ul><li>你可以根据这个回调访问 <code>dnd</code> 的核心接口，从而自定义你需要的状态</li><li>换句话说 <code>dnd</code> 不关系你程序的 具体业务状态 比如 <code>isDragging</code> , 相反是你自己基于 <code>monitor.isDragging()</code> 接口 计算了这个状态</li></ul></li></ul></li><li><p>Out</p><ul><li><p><code>drag</code></p><p><code>drag</code> 是一个 <code>ref</code>，所以它也不单纯是输出 也可以看做是输入，将被拖拽的 元素传入到 <code>useDrag hook</code></p></li><li><p><code>{}</code></p><ul><li><code>isDragging</code> 是 自定义的状态</li></ul></li></ul></li></ul></li></ul><h3 id="usedrop" tabindex="-1"><a class="header-anchor" href="#usedrop" aria-hidden="true">#</a> useDrop</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">BoardSquare</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> black <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> isOver<span class="token punctuation">,</span> canDrop <span class="token punctuation">}</span><span class="token punctuation">,</span> drop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDrop</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">accept</span><span class="token operator">:</span> ItemTypes<span class="token punctuation">.</span><span class="token constant">KNIGHT</span><span class="token punctuation">,</span>
      <span class="token function-variable function">drop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">moveKnight</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">canDrop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">canMoveKnight</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">collect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">monitor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">isOver</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>monitor<span class="token punctuation">.</span><span class="token function">isOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">canDrop</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>monitor<span class="token punctuation">.</span><span class="token function">canDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>drop<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">&quot;relative&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&quot;100%&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&quot;100%&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Square</span></span> <span class="token attr-name">black</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>black<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Square</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>isOver <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>canDrop <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Overlay</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>OverlayType<span class="token punctuation">.</span>IllegalMoveHover<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token operator">!</span>isOver <span class="token operator">&amp;&amp;</span> canDrop <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Overlay</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>OverlayType<span class="token punctuation">.</span>PossibleMove<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>isOver <span class="token operator">&amp;&amp;</span> canDrop <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Overlay</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>OverlayType<span class="token punctuation">.</span>LegalMoveHover<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>In &amp; Out</code></p><ul><li><p>In</p><ul><li><code>accept</code><ul><li>对应 <code>useDrag</code> 传入的 <code>type</code></li></ul></li><li><code>canDrop</code> callback <ul><li>是否可以 放下</li><li>依赖于 <code>上下文</code> 信息</li></ul></li><li><code>drop</code> callback <ul><li>放下后执行的回调</li></ul></li><li><code>collect</code> callback <ul><li>和 <code>useDrag</code> 一样 你也需要自己定制你需要的业务状态</li><li>通过 访问 <code>monitor</code> 的 API</li></ul></li></ul></li><li><p>Out</p><ul><li><p><code>drop</code></p><p><code>drop</code> 是一个 <code>ref</code>，所以它也不单纯是输出 也可以看做是输入，将可被落下的 元素传入到 <code>useDrop hook</code></p></li></ul></li><li><p><code>{}</code></p><ul><li><code>isOver</code> 是 自定义的状态</li><li><code>canDrop</code> 是 自定义的状态</li></ul></li></ul></li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p><code>Dnd</code> 的 接口设计</p><ul><li>基于 <code>hook</code></li><li>相对于常见的 <code>hook</code> 接口设计无疑是比较复杂的 <ul><li>这里返回的第一个参数无疑非常 有趣 <ul><li>你可以理解 不是 <code>dnd</code> 设计 接口 而是用户自己 ！只不过你需要通过 <code>monitor</code> 的 <code>API</code> 来计算每个接口属性</li></ul></li><li>当你熟悉了这个接口 你又会认为这个 设计 无疑是 足够抽象简洁 <ul><li>没有对比，没有伤害</li><li>业务复杂（拖拽），接口不可能简单</li><li>不简单不意味着不简洁</li></ul></li></ul></li><li>Drag <ul><li>关注 <ul><li>拖动元素的类型</li></ul></li></ul></li><li>Drop <ul><li>关注 <ul><li>可接受的 拖动元素的类型（能放下）</li><li>是否可以 接受的放下 操作的回调 （允许放下）</li><li>放下后的 后续动作的回调</li></ul></li></ul></li><li>换句话说 <ul><li>我们关心 <ul><li>什么被拖动了</li><li>什么能够被放下</li><li>什么情况下允许被放下</li><li>放下后的后续操作</li></ul></li></ul></li></ul>`,16);function k(v,m){const s=t("ExternalLinkIcon");return e(),o("div",null,[u,a("p",null,[n("我非常推荐 大家阅读原文 "),a("a",r,[n("React Dnd Tutorial"),c(s)]),n("，")]),d])}const b=p(i,[["render",k],["__file","react-dnd.html.vue"]]);export{b as default};
