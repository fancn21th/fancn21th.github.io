import{_ as a,r,o as s,c as i,a as e,b as o,d as n,e as c}from"./app-e3dbf12f.js";const l={},d=e("h1",{id:"vue",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue","aria-hidden":"true"},"#"),o(" Vue")],-1),u={href:"https://cn.vuejs.org/v2/guide/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://staging-cn.vuejs.org/guide/introduction.html",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"我推荐 新人采用 下面的 学习轨迹，一开始掌握足够的基础 然后通过 实践训练 不断积累更高阶的 技能。",-1),h={href:"https://cn.vuejs.org/v2/guide/",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[e("code",null,"学习掌握 学习/教程/基础 栏目下所有内容"),o(" --> "),e("code",null,"开始实践"),o(" --> "),e("code",null,"遇到问题或者踩到坑"),o(" --> "),e("code",null,"优先在 学习/教程/ 下面寻找解决方案"),o("。")],-1),_={class:"custom-container warning"},f=e("p",{class:"custom-container-title"},"注意",-1),v=e("p",null,[o("从过去的经验来看，几乎你能遇到的所有问题 都能在 官网找到解决方案。这也是我觉得 "),e("code",null,"Vue"),o(" 做的非常棒的地方，它 确实非常 "),e("code",null,"易用"),o("。能覆盖绝大部分前端的应用场景。")],-1),b={href:"https://cn.vuejs.org/v2/guide/components-edge-cases.html#ad",target:"_blank",rel:"noopener noreferrer"},x=c('<p>那么还有什么是官方教程里面没涉及到的呢？ 我想 主要是 <code>设计模式</code> 以及 <code>习语</code>。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>Design patterns</code> are solutions to programming problems you find again and again in real-world application development. The design involves a description or a solution template for solving a problem that can be applied in different scenarios. Patterns are formalized best practices that developers can use in their own applications.</p><p><code>设计模式</code> 就是 编程的套路。 既然叫套路 那就是 屡试不爽的解决方案。</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>What exactly is an <code>idiom</code>? According to Wikipedia it is &quot;an expression of a simple task, algorithm, or data structure that is not a built-in feature in the programming language being used, or, conversely, the use of an unusual or notable feature that is built in to a programming language&quot;. Then it goes on: &quot;The term can be used more broadly, however, to refer to complex algorithms or programming design patterns. Knowing the idioms associated with a programming language and how to use them is an important part of gaining fluency in that language.&quot;</p><p><code>习语</code> 也是套路， 相对于 <code>设计模式</code> 它更简短，可能就是一行代码。因此 并没有必要 明显地去区分 <code>设计模式</code> 和 <code>习语</code>， 他们都是指前端编程里面 常见的，经典的解决方案。</p></div>',3);function k(V,w){const t=r("ExternalLinkIcon");return s(),i("div",null,[d,e("p",null,[e("a",u,[o("Vue"),n(t)]),o(" 和 "),e("a",p,[o("Vue3"),n(t)]),o(" 的官方文档是最好的入门教程。")]),g,e("p",null,[o("以 "),e("a",h,[o("Vue"),n(t)]),o(" 教程为例：")]),m,e("div",_,[f,v,e("p",null,[o("比如 在 "),e("a",b,[o("处理边界情况"),n(t)]),o(" 里提到的循环引用问题。轻易就解决了我的疑惑，没有让我们费时费力的去踩坑。")])]),x])}const j=a(l,[["render",k],["__file","index.html.vue"]]);export{j as default};
