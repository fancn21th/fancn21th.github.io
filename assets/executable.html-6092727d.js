import{_ as o,r as i,o as d,c,a as e,b as s,d as l,e as a}from"./app-e3dbf12f.js";const t={},p=a(`<h1 id="可执行文件" tabindex="-1"><a class="header-anchor" href="#可执行文件" aria-hidden="true">#</a> 可执行文件</h1><h2 id="创建一个可执行文件" tabindex="-1"><a class="header-anchor" href="#创建一个可执行文件" aria-hidden="true">#</a> 创建一个可执行文件</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>nodejs</code> 已经安装在目标 机器操作系统内</p></div><ul><li><p>创建一个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在文件里 打印 <code>hello</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>让文件可执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用 <code>node</code> 执行文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用 <code>node</code> 执行不够 cool</p></li><li><p>可执行文件</p><p>将下面的文本放到文件头部， 它叫做 <a href="Shebang" title="Unix">Shebang</a></p><ul><li>zsh shell</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>normal shell</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>必须带上执行路径不够 cool</p></li><li><p>注册路径</p><p>将 <code>hello</code> 文件路径注册到 <code>path</code></p><ul><li><p>zsh</p><p>将文件路径加入到 <code>~/.zshrc</code> 文件中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">path</span><span class="token operator">+=</span>pwd <span class="token comment"># pwd 代表 hello 的路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新加载 <code>.zshrc</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>现在可以到任何目录下执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>🆒</p></li></ul><h2 id="可执行文件-包含依赖包" tabindex="-1"><a class="header-anchor" href="#可执行文件-包含依赖包" aria-hidden="true">#</a> 可执行文件 包含依赖包</h2>`,5),r=a(`<p>操作</p><p>如果我们想在 文件里面 调用其他 <code>Node</code> 模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先需要 让项目支持 <code>ESM</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新 <code>package.json</code> 支持 <code>import</code> 语法</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在依然执行会报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i esm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>hello</code> 文件头部 <code>shebang</code> 增加一点 <code>trick</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node -r esm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>嗯， 现在可以在 当前目录下执行 <code>hello</code></p><p>等等， 如果 我们换一个位置执行 <code>hello</code> 还是会报告 <code>Cannot find module &#39;esm&#39;</code></p><p>那么我们需要 继续更新 <code>shebang</code>， 增加 <code>NODE_PATH</code> 的指定</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env -S NODE_PATH=[pwd]/node_modules node -r esm -r globals</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在你可以在任何目录下执行 <code>hello</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些小问题   当前 目录下会生成一个 <code>node_modules</code> 文件夹 这是 <code>cache</code> 文件</p>`,18),u={href:"https://www.npmjs.com/package/esm",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env -S NODE_PATH=[pwd]/node_modules ESM_OPTIONS=&#39;{mode:&quot;auto&quot;,cache:0}&#39; node -r esm -r globals</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们看看 <code>esm</code> 的 <code>issues</code> 或者 <code>tests</code> 里面是不是有方案</p>`,2),h={href:"https://github.com/standard-things/esm/blob/master/test/cache-tests.js",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"How 🆒 is that",-1),b=e("p",null,"回顾一下",-1),g=e("p",null,[e("code",null,"zsh"),s(" 执行 了 "),e("code",null,"hello"),s(" 文件， 它通过文件头部 "),e("code",null,"shebang"),s(" 知道用 "),e("code",null,"node"),s(" 来执行 文件， 此外并且增加了 一些列的 flags")],-1),k=e("li",null,[e("code",null,"-S NODE_PATH=..."),e("ul",null,[e("li",null,"指定 node path 从而找到依赖包安装的位置")])],-1),_=e("li",null,[e("code",null,"-S ESM_OPTIONS=..."),e("ul",null,[e("li",null,"命令执行后 去掉在当前目录下生成的缓存文件")])],-1),x=e("code",null,"-r esm",-1),q={href:"https://nodejs.org/docs/latest-v14.x/api/cli.html",target:"_blank",rel:"noopener noreferrer"},f=e("ul",null,[e("li",null,"Preload the specified module at startup.")],-1),j=e("li",null,[e("code",null,"-r globals"),e("ul",null,[e("li",null,"同上")])],-1),S=a(`<h2 id="可执行文件-扩展" tabindex="-1"><a class="header-anchor" href="#可执行文件-扩展" aria-hidden="true">#</a> 可执行文件 扩展</h2><ul><li><p>top level <code>await</code></p><p>默认情况下 <code>await</code> 不可以在 函数外 声明</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;esm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.2.25&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;esm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;await&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>global utilities</p><p>增加一些 全局对象 方便 编写 <code>cli</code> 脚本</p></li></ul>`,2);function w(y,E){const n=i("ExternalLinkIcon");return d(),c("div",null,[p,e("ul",null,[e("li",null,[r,e("p",null,[e("a",u,[s("ESM_DISABLE_CACHE"),l(n)]),s(" flag 看起来就是为了解决这个问题")]),v,e("p",null,[e("a",h,[s("cache-tests"),l(n)])]),m]),e("li",null,[b,g,e("ul",null,[k,_,e("li",null,[x,e("ul",null,[e("li",null,[e("a",q,[s("--require module"),l(n)]),f])])]),j])])]),S])}const O=o(t,[["render",w],["__file","executable.html.vue"]]);export{O as default};
