import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-e3dbf12f.js";const i={},u=n("h1",{id:"算法-性能篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法-性能篇","aria-hidden":"true"},"#"),s(" 算法（性能篇）")],-1),r=n("blockquote",null,[n("p",null,"algorithm cookbook for performance enhancement")],-1),d=n("h2",{id:"reduce-优化-大数据集处理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reduce-优化-大数据集处理","aria-hidden":"true"},"#"),s(" Reduce 优化 大数据集处理")],-1),k=n("p",null,"问题",-1),m={href:"https://zh.javascript.info/task/chain-calls",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token number">10_000_000</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ... 10_000_000]</span>
<span class="token keyword">const</span> bigData <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">even</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这是不是严格意义的链式调用的写法 但是 实际是同样的结果</span>
<span class="token keyword">const</span> <span class="token function-variable function">filterMappedBigData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token function">even</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;filter and map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">filterMappedBigData</span><span class="token punctuation">(</span>bigData<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;filter and map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token comment"># 执行时间</span>
 console.time
    filter and map: <span class="token number">294</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=e(`<li><p>方案</p><p>可以使用 <code>reduce</code> 方法来提升性能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> acc<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">reducedBigData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> items<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;reduce&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">reducedBigData</span><span class="token punctuation">(</span>bigData<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;reduce&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token comment"># 执行时间</span>
  console.time
    reduce: <span class="token number">190</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),f=n("p",null,"讨论",-1),h=n("li",null,[n("code",null,"reduce"),s(" 方法减少了循环的次数因此性能更好")],-1),_={href:"https://github.com/fancn21th/frontend-algorithm-cookbook/blob/main/src/reduce-is-faster/reduce-is-faster.test.js",target:"_blank",rel:"noopener noreferrer"},g={class:"custom-container tip"},x=n("p",{class:"custom-container-title"},"提示",-1),y=n("code",null,"声明式",-1),w={href:"https://zh.javascript.info/task/chain-calls",target:"_blank",rel:"noopener noreferrer"};function j(q,B){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,d,n("ul",null,[n("li",null,[k,n("p",null,[s("给定一个大数据集， 针对它进行多个步骤的数据转换处理，常见的方案是 "),n("a",m,[s("链式调用"),t(a)]),s(" 数组方法， 有没有更好的方案？")]),v]),b,n("li",null,[f,n("ul",null,[h,n("li",null,[n("a",_,[s("Code In Unit Test"),t(a)])])]),n("div",g,[x,n("p",null,[s("当 数据集并不大的时候 依然建议用 "),y,s(" 的 "),n("a",w,[s("链式调用"),t(a)])])])])])])}const E=p(i,[["render",j],["__file","algorithm-perf.html.vue"]]);export{E as default};
