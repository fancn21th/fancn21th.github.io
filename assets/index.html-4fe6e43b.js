import{_ as o,r as n,o as i,c as s,a as e,b as t,d as r,e as c}from"./app-e3dbf12f.js";const l={},d=e("h1",{id:"架构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#架构","aria-hidden":"true"},"#"),t(" 架构")],-1),h=e("h2",{id:"what-is-architecture",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-is-architecture","aria-hidden":"true"},"#"),t(" What is architecture")],-1),u=e("a",{href:""},"Lukas Ruebbelke",-1),p={href:"https://egghead.io/lessons/javascript-how-decoupling-has-driven-frontend-architecture",target:"_blank",rel:"noopener noreferrer"},m=c('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>&quot;We can not effectively discuss any design pattern without first discussing coupling, abstraction, and cohesion.&quot;</p><p>-- <a href="">Lukas Ruebbelke</a></p></div><p>I think when it comes to the architecture of a newly coming frontend project, big or small. It always comes down to the decision what should be gathered around and what else should be separated into different layers.</p><p>Single Responsibility always prevail and works alone. All you need to do is simply put one task into single small file and wire them up in a elegant style.</p><p>Somehow it remind me of the architecture of the nature world. We never invent it and just see it through from the true world and mimic at large.</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>&quot;Good abstraction not only simply thins conceptually but create incredible opportunities that are not immediately obvious.&quot;</p><p>-- <a href="">Lukas Ruebbelke</a></p></div>',5);function f(_,b){const a=n("ExternalLinkIcon");return i(),s("div",null,[d,h,e("p",null,[t("I can not agree more about how "),u,t(" explain what is frontend architecture is all about in his lesson @ "),e("a",p,[t("Transform Local JavaScript Functions into Serverless API Endpoints"),r(a)]),t(".")]),m])}const g=o(l,[["render",f],["__file","index.html.vue"]]);export{g as default};
